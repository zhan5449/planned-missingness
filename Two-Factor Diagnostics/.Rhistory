summarise(across(c(cor_pooled:psrf), mean, .names="{.col}")) %>%
mutate(cor_pop=0.398302,
sample_size=500) %>%  #P6
mutate(missing_prop=case_when(
no_missing == 2 ~ "20%",
no_missing == 4 ~ "40%",
no_missing == 6 ~ "60%",
no_missing == 8 ~ "80%"
))
##pb
PB <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, PB)
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
scale_fill_grey() +
jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")
PB <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, PB)
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")+
theme_blank()
.First <- function() {
# Load packages
library(tidyverse)
# Set theme
apa_theme <- theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA)
)
theme_set(theme_minimal(base_size = 18) +
apa_theme)
}
PB <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, PB)
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")+
#theme_blank()
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")
PB <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, PB)
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")
#theme_blank()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
##take output of simulation2_diagnostics.R to create plots
#import files i1-iX in Two-Factor Diagnostics
#each has 250 iterations for 20,40,60,80% missing (all same pop cor-.4 and n-500)
#getwd()
#desired output:
#one plot per parameter- AC, psrf, Percent Bias, coverage rate, fmi
#x axis should be iterations
#y is parameter
#4 lines for each level of missingness
##SET GGPLOT THEME TO BE IN LINE WITH APA -https://ggplot2tutor.com/tutorials/apa_theme_rprofile
.First <- function() {
# Load packages
library(tidyverse)
# Set theme
apa_theme <- theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA)
)
theme_set(theme_minimal(base_size = 18) +
apa_theme)
}
#the different i1-iX are just simulations of the same task with different seeds
#i.e., i want to average across iteration=3 from i1-iX and this will be one point on the plot
#should i compute SD across simulations? ignore for now for time
##step 1- read in all files, as list?
setwd("./Two-Factor Diagnostics/")
##step 1- read in all files, as list?
setwd("./Two-Factor Diagnostics/")
GETW
getwd()
##step 1- read in all files, as list?
setwd("./Two-Factor Diagnostics/")
##step 1- read in all files, as list?
#setwd("./Two-Factor Diagnostics/")
temp <- list.files(pattern=".csv")
sim_results <- lapply(temp, read_csv) #will this be a list object
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
##SET GGPLOT THEME TO BE IN LINE WITH APA -https://ggplot2tutor.com/tutorials/apa_theme_rprofile
.First <- function() {
# Load packages
library(tidyverse)
# Set theme
apa_theme <- theme(
plot.margin = unit(c(1, 1, 1, 1), "cm"),
plot.background = element_rect(fill = "white", color = NA),
plot.title = element_text(size = 22, face = "bold",
hjust = 0.5,
margin = margin(b = 15)),
axis.line = element_line(color = "black", size = .5),
axis.title = element_text(size = 18, color = "black",
face = "bold"),
axis.text = element_text(size = 15, color = "black"),
axis.text.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10)),
axis.ticks = element_line(size = .5),
panel.grid = element_blank(),
legend.position = c(0.20, 0.8),
legend.background = element_rect(color = "black"),
legend.text = element_text(size = 15),
legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
legend.key = element_rect(color = NA, fill = NA)
)
theme_set(theme_minimal(base_size = 18) +
apa_theme)
}
##step 1- read in all files, as list?
#setwd("./Two-Factor Diagnostics/")
temp <- list.files(pattern=".csv")
sim_results <- lapply(temp, read_csv) #will this be a list object
sim_averages<-bind_rows(sim_results) %>%
group_by(no_missing,iteration_no) %>%
summarise(across(c(cor_pooled:psrf), mean, .names="{.col}")) %>%
mutate(cor_pop=0.398302,
sample_size=500) %>%  #P6
mutate(missing_prop=case_when(
no_missing == 2 ~ "20%",
no_missing == 4 ~ "40%",
no_missing == 6 ~ "60%",
no_missing == 8 ~ "80%"
))
##Cor_pooled - reference the pop_cor
cor_pooled <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, cor_pooled)
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop))
install.packages("usethis")
usethis::edit_r_profile()
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
##step 1- read in all files, as list?
#setwd("./Two-Factor Diagnostics/")
temp <- list.files(pattern=".csv")
sim_results <- lapply(temp, read_csv) #will this be a list object
sim_averages<-bind_rows(sim_results) %>%
group_by(no_missing,iteration_no) %>%
summarise(across(c(cor_pooled:psrf), mean, .names="{.col}")) %>%
mutate(cor_pop=0.398302,
sample_size=500) %>%  #P6
mutate(missing_prop=case_when(
no_missing == 2 ~ "20%",
no_missing == 4 ~ "40%",
no_missing == 6 ~ "60%",
no_missing == 8 ~ "80%"
))
##Cor_pooled - reference the pop_cor
cor_pooled <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, cor_pooled)
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop))
##pb
PB <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, PB)
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")
library(tidyverse)
##take output of simulation2_diagnostics.R to create plots
#import files i1-iX in Two-Factor Diagnostics
#each has 250 iterations for 20,40,60,80% missing (all same pop cor-.4 and n-500)
#getwd()
#desired output:
#one plot per parameter- AC, psrf, Percent Bias, coverage rate, fmi
#x axis should be iterations
#y is parameter
#4 lines for each level of missingness
##SET GGPLOT THEME TO BE IN LINE WITH APA -https://ggplot2tutor.com/tutorials/apa_theme_rprofile
# .First <- function() {
#   # Load packages
#   library(tidyverse)
#
#   # Set theme in .Rprofile- comment out when done
#   #usethis::edit_r_profile()
#   apa_theme <- theme(
#     plot.margin = unit(c(1, 1, 1, 1), "cm"),
#     plot.background = element_rect(fill = "white", color = NA),
#     plot.title = element_text(size = 22, face = "bold",
#                               hjust = 0.5,
#                               margin = margin(b = 15)),
#     axis.line = element_line(color = "black", size = .5),
#     axis.title = element_text(size = 18, color = "black",
#                               face = "bold"),
#     axis.text = element_text(size = 15, color = "black"),
#     axis.text.x = element_text(margin = margin(t = 10)),
#     axis.title.y = element_text(margin = margin(r = 10)),
#     axis.ticks = element_line(size = .5),
#     panel.grid = element_blank(),
#     legend.position = "bottom",
#     legend.background = element_rect(color = "black"),
#     legend.text = element_text(size = 15),
#     legend.margin = margin(t = 5, l = 5, r = 5, b = 5),
#     legend.key = element_rect(color = NA, fill = NA)
#   )
#
#   theme_set(theme_minimal(base_size = 18) +
#               apa_theme)
# }
#the different i1-iX are just simulations of the same task with different seeds
#i.e., i want to average across iteration=3 from i1-iX and this will be one point on the plot
#should i compute SD across simulations? ignore for now for time
##step 1- read in all files, as list?
#setwd("./Two-Factor Diagnostics/")
temp <- list.files(pattern=".csv")
sim_results <- lapply(temp, read_csv) #will this be a list object
sim_averages<-bind_rows(sim_results) %>%
group_by(no_missing,iteration_no) %>%
summarise(across(c(cor_pooled:psrf), mean, .names="{.col}")) %>%
mutate(cor_pop=0.398302,
sample_size=500) %>%  #P6
mutate(missing_prop=case_when(
no_missing == 2 ~ "20%",
no_missing == 4 ~ "40%",
no_missing == 6 ~ "60%",
no_missing == 8 ~ "80%"
))
write_rds(sim_average,"sim_averages.rds")
sim_averages<-bind_rows(sim_results) %>%
group_by(no_missing,iteration_no) %>%
summarise(across(c(cor_pooled:psrf), mean, .names="{.col}")) %>%
mutate(cor_pop=0.398302,
sample_size=500) %>%  #P6
mutate(missing_prop=case_when(
no_missing == 2 ~ "20%",
no_missing == 4 ~ "40%",
no_missing == 6 ~ "60%",
no_missing == 8 ~ "80%"
))
getw
getwd()
write_rds(sim_averages,"./sim_averages.rds")
read_rds(sim_averages,"./sim_averages.rds")
sim_averages <- read_rds(sim_averages,"./sim_averages.rds")
sim_averages <- read_rds("./sim_averages.rds")
cor_pooled <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, cor_pooled)
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop))
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop),linetype="dashed",color="grey")
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop),linetype="dashed",color="grey") +
labs(x="Iteration",y="Imputed Factor Correlation",color="Missing Rate(%)")
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop),linetype="dashed",color="grey") +
labs(x="Iteration",y="Imputed Factor Correlation",color="Missing Rate (%)")
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop),linetype="dashed",color="grey") +
labs(x="Iteration",y="Imputed Factor Correlation",color="Missing Rate (%)") +
ylim(c(0.2,0.6))
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop),linetype="dashed",color="grey") +
labs(x="Iteration",y="Imputed Factor Correlation",color="Missing Rate (%)") +
ylim(c(0.3,0.5))
ac <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, ac)
ac %>% ggplot(aes(x=iteration_no,y=ac, color=missing_prop)) +
geom_line() +
geom_line(aes(y=0),linetype="dashed",color="grey") +
labs(x="Iteration",y="Autocorrelation",color="Missing Rate (%)")
ac %>% ggplot(aes(x=iteration_no,y=ac, color=missing_prop)) +
geom_line() +
geom_line(aes(y=0),linetype="dashed",color="grey") +
labs(x="Iteration",y="Autocorrelation",color="Missing Rate (%)")+
ylim(c(0,1))
psrf %>% ggplot(aes(x=iteration_no,y=psrf, color=missing_prop)) +
geom_line() +
geom_line(aes(y=1.01),linetype="dashed",color="grey") +
geom_line(aes(y=1.10),linetype="dashed",color="grey") +
labs(x="Iteration",y=expression(hat(R)),color="Missing Rate (%)")
##psrf
psrf <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, psrf)
psrf %>% ggplot(aes(x=iteration_no,y=psrf, color=missing_prop)) +
geom_line() +
geom_line(aes(y=1.01),linetype="dashed",color="grey") +
geom_line(aes(y=1.10),linetype="dashed",color="grey") +
labs(x="Iteration",y=expression(hat(R)),color="Missing Rate (%)")
psrf %>% ggplot(aes(x=iteration_no,y=psrf, color=missing_prop)) +
geom_line() +
geom_line(aes(y=1.01),linetype="dashed",color="grey") +
geom_line(aes(y=1.10),linetype="dashed",color="grey") +
labs(x="Iteration",y=expression(hat(R)),color="Missing Rate (%)") +
ylim(c(1.0,1.5))
psrf %>% ggplot(aes(x=iteration_no,y=psrf, color=missing_prop)) +
geom_line() +
geom_line(aes(y=1.01),linetype="dashed",color="grey") +
geom_line(aes(y=1.10),linetype="dashed",color="grey") +
labs(x="Iteration",y=expression(hat(R)),color="Missing Rate (%)") +
ylim(c(1.0,1.9))
psrf %>% ggplot(aes(x=iteration_no,y=psrf, color=missing_prop)) +
geom_line() +
geom_line(aes(y=1.01),linetype="dashed",color="grey") +
geom_line(aes(y=1.10),linetype="dashed",color="grey") +
labs(x="Iteration",y=expression(hat(R)),color="Missing Rate (%)") +
ylim(c(1.0,1.8))
fmi %>% ggplot(aes(x=iteration_no,y=fmi, color=missing_prop)) +
geom_line() +
scale_fill_grey() +
labs(x="Iteration",y="Fraction of Missing Information (%)",color="Missing Rate(%)")
fmi <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, fmi)
mn_by_miss <- fmi %>%
group_by(missing_prop) %>% summarise(mn_fmi=mean(fmi))
fmi %>% ggplot(aes(x=iteration_no,y=fmi, color=missing_prop)) +
geom_line() +
scale_fill_grey() +
labs(x="Iteration",y="Fraction of Missing Information",color="Missing Rate(%)")
##pb
PB <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, PB)
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")
psrf %>% ggplot(aes(x=iteration_no,y=psrf, color=missing_prop)) +
geom_line() +
geom_line(aes(y=1.01),linetype="dashed",color="grey") +
geom_line(aes(y=1.10),linetype="dashed",color="grey") +
labs(x="Iteration",y=expression(hat(R)),color="Missing Rate (%)") +
ylim(c(1.0,13))
ylim(c(0.0,13))
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")
PB <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, PB)
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
geom_line(aes(y=0), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")
ylim(c(0.0,13))
##fmi
fmi <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, fmi)
mn_by_miss <- fmi %>%
group_by(missing_prop) %>% summarise(mn_fmi=mean(fmi))
mn_by_miss
20*.01
.2/20
.4/20
.1/20
#ALSO PLOT THRESHOLD AT WHICH FMI/m = .01
#for 20%, that is .2, .4, .6, .8 etc. values here and lower good
fmi %>% ggplot(aes(x=iteration_no,y=fmi, group=missing_prop)) +
geom_line(aes(color=missing_prop),size=.8) +
scale_fill_grey() +
labs(x="Iteration",y="Fraction of Missing Information",color="Missing Rate(%)")
#ALSO PLOT THRESHOLD AT WHICH FMI/m = .01
#for 20%, that is .2, .4, .6, .8 etc. values here and lower good
fmi %>% ggplot(aes(x=iteration_no,y=fmi, group=missing_prop)) +
geom_line(aes(color=missing_prop),linewidth=.6) +
scale_fill_grey() +
labs(x="Iteration",y="Fraction of Missing Information",color="Missing Rate(%)")
#ALSO PLOT THRESHOLD AT WHICH FMI/m = .01
#for 20%, that is .2, .4, .6, .8 etc. values here and lower good
fmi %>% ggplot(aes(x=iteration_no,y=fmi, group=missing_prop)) +
geom_line(aes(color=missing_prop),linewidth=.7) +
scale_fill_grey() +
labs(x="Iteration",y="Fraction of Missing Information",color="Missing Rate(%)")
#ALSO PLOT THRESHOLD AT WHICH FMI/m = .01
#for 20%, that is .2, .4, .6, .8 etc. values here and lower good
fmi %>% ggplot(aes(x=iteration_no,y=fmi, group=missing_prop)) +
geom_line(aes(color=missing_prop),linewidth=.65) +
scale_fill_grey() +
labs(x="Iteration",y="Fraction of Missing Information",color="Missing Rate(%)")
#ALSO PLOT THRESHOLD AT WHICH FMI/m = .01
#for 20%, that is .2, .4, .6, .8 etc. values here and lower good
fmi %>% ggplot(aes(x=iteration_no,y=fmi, group=missing_prop)) +
geom_line(aes(color=missing_prop),linewidth=.6) +
scale_fill_grey() +
labs(x="Iteration",y="Fraction of Missing Information",color="Missing Rate(%)")
mn_by_miss
.861/80
View(sim_averages)
check <- sim_averages %>% filter(no_missing==8)
check <- sim_averages %>% filter(missing_prop==)
check <- sim_averages %>% filter(missing_prop=="80%")
sim_averages$no_missing
sim_averages$no_missing==8
check <- sim_averages %>% filter(no_missing==8)
sim_averages %>% filter(no_missing==8)
filter(sim_averages, no_missing==8)
check <- fmi %>%
filter(no_missing==8)
sim_averages <- read_rds("./sim_averages.rds")
names(sim_averages)
##fmi
fmi <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, fmi)
check <- fmi %>% ungroup() %>%
filter(no_missing==8)
fmi %>% ungroup()
check <- fmi %>% ungroup() %>%
filter(no_missing >= 8)
check <- fmi %>% ungroup() %>%
filter(no_missing)
View(fmi)
check <- fmi %>% ungroup() %>%
filter(no_missing ==8 )
0.8723339/80
0.8600042/80
0.8526018/80
0.8454378/80
cor_pooled <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, cor_pooled)
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop),linetype="dashed",color="grey") +
labs(x="Iteration",y="Imputed Factor Correlation",color="Missing Rate (%)") +
ylim(c(0.3,0.5))
ggsave("cor_pooled.png")
ggsave("PB.png")
##Cor_pooled - reference the pop_cor
cor_pooled <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, cor_pooled)
cor_pooled %>% ggplot(aes(x=iteration_no,y=cor_pooled, color=missing_prop)) +
geom_line() +
geom_line(aes(y=cor_pop),linetype="dashed",color="grey") +
labs(x="Iteration",y="Imputed Factor Correlation",color="Missing Rate (%)") +
ylim(c(0.3,0.5))
ggsave("cor_pooled.png")
##pb
PB <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, PB)
PB %>% ggplot(aes(x=iteration_no,y=PB, color=missing_prop)) +
geom_line() +
geom_line(aes(y=5), linetype="dashed",color="grey") +
geom_line(aes(y=0), linetype="dashed",color="grey") +
scale_fill_grey() +
# jtools::theme_apa() +
labs(x="Iteration",y="Percent Bias(%)",color="Missing Rate(%)")
ylim(c(0.0,13))
ggsave("PB.png")
ac <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, ac)
ac %>% ggplot(aes(x=iteration_no,y=ac, color=missing_prop)) +
geom_line() +
geom_line(aes(y=0),linetype="dashed",color="grey") +
labs(x="Iteration",y="Autocorrelation",color="Missing Rate (%)")+
ylim(c(0,1))
ggsave("AC.png")
psrf <- sim_averages %>% select(missing_prop, cor_pop, iteration_no, psrf)
psrf %>% ggplot(aes(x=iteration_no,y=psrf, color=missing_prop)) +
geom_line() +
geom_line(aes(y=1.01),linetype="dashed",color="grey") +
geom_line(aes(y=1.10),linetype="dashed",color="grey") +
labs(x="Iteration",y=expression(hat(R)),color="Missing Rate (%)") +
ylim(c(1.0,1.8))
ggsave("psrf.png")
